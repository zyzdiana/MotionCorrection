#ifndef CubicBSplineInterpolator_h
#define CubicBSplineInterpolator_h

#include "Cubic3DInterpolator.h"

#include <Eigen/Dense>
#include <cmath>

#include <iostream>

template <
    typename VolumeT,
    typename CoordT
  >
class CubicBSplineInterpolator :
  public Cubic3DInterpolator<VolumeT, CoordT> {

  public:
    typedef typename VolumeT::value_type T;
    typedef Eigen::Matrix< T, 64, 64 >  Matrix_64_64_T;
    typedef Eigen::Matrix< T, 64, Eigen::Dynamic >  Matrix_64_X_T;

    // This matrix is scaled by 216 relative to the one in the original
    // implementation. This was done along with a simplification to the 
    // computation of the coefficient volume (see below), which makes
    // this matrix integers and removes a multiplication step from
    // the algorithm below.
    Matrix_64_64_T generate_X_inv(){
        Matrix_64_64_T X_inv(64,64);
        X_inv << 1, 4, 1, 0, 4, 16, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 4, 16, 4, 0, 16, 64, 16, 0, 4, 16, 4, 0, 0, 0, 0, 0, 1, 4, 1, 0, 4, 16, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-3, 0, 3, 0, -12, 0, 12, 0, -3, 0, 3, 0, 0, 0, 0, 0, -12, 0, 12, 0, -48, 0, 48, 0, -12, 0, 12, 0, 0, 0, 0, 0, -3, 0, 3, 0, -12, 0, 12, 0, -3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
3, -6, 3, 0, 12, -24, 12, 0, 3, -6, 3, 0, 0, 0, 0, 0, 12, -24, 12, 0, 48, -96, 48, 0, 12, -24, 12, 0, 0, 0, 0, 0, 3, -6, 3, 0, 12, -24, 12, 0, 3, -6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-1, 3, -3, 1, -4, 12, -12, 4, -1, 3, -3, 1, 0, 0, 0, 0, -4, 12, -12, 4, -16, 48, -48, 16, -4, 12, -12, 4, 0, 0, 0, 0, -1, 3, -3, 1, -4, 12, -12, 4, -1, 3, -3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-3, -12, -3, 0, 0, 0, 0, 0, 3, 12, 3, 0, 0, 0, 0, 0, -12, -48, -12, 0, 0, 0, 0, 0, 12, 48, 12, 0, 0, 0, 0, 0, -3, -12, -3, 0, 0, 0, 0, 0, 3, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, 0, -9, 0, 0, 0, 0, 0, -9, 0, 9, 0, 0, 0, 0, 0, 36, 0, -36, 0, 0, 0, 0, 0, -36, 0, 36, 0, 0, 0, 0, 0, 9, 0, -9, 0, 0, 0, 0, 0, -9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-9, 18, -9, 0, 0, 0, 0, 0, 9, -18, 9, 0, 0, 0, 0, 0, -36, 72, -36, 0, 0, 0, 0, 0, 36, -72, 36, 0, 0, 0, 0, 0, -9, 18, -9, 0, 0, 0, 0, 0, 9, -18, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
3, -9, 9, -3, 0, 0, 0, 0, -3, 9, -9, 3, 0, 0, 0, 0, 12, -36, 36, -12, 0, 0, 0, 0, -12, 36, -36, 12, 0, 0, 0, 0, 3, -9, 9, -3, 0, 0, 0, 0, -3, 9, -9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
3, 12, 3, 0, -6, -24, -6, 0, 3, 12, 3, 0, 0, 0, 0, 0, 12, 48, 12, 0, -24, -96, -24, 0, 12, 48, 12, 0, 0, 0, 0, 0, 3, 12, 3, 0, -6, -24, -6, 0, 3, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-9, 0, 9, 0, 18, 0, -18, 0, -9, 0, 9, 0, 0, 0, 0, 0, -36, 0, 36, 0, 72, 0, -72, 0, -36, 0, 36, 0, 0, 0, 0, 0, -9, 0, 9, 0, 18, 0, -18, 0, -9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, -18, 9, 0, -18, 36, -18, 0, 9, -18, 9, 0, 0, 0, 0, 0, 36, -72, 36, 0, -72, 144, -72, 0, 36, -72, 36, 0, 0, 0, 0, 0, 9, -18, 9, 0, -18, 36, -18, 0, 9, -18, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-3, 9, -9, 3, 6, -18, 18, -6, -3, 9, -9, 3, 0, 0, 0, 0, -12, 36, -36, 12, 24, -72, 72, -24, -12, 36, -36, 12, 0, 0, 0, 0, -3, 9, -9, 3, 6, -18, 18, -6, -3, 9, -9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-1, -4, -1, 0, 3, 12, 3, 0, -3, -12, -3, 0, 1, 4, 1, 0, -4, -16, -4, 0, 12, 48, 12, 0, -12, -48, -12, 0, 4, 16, 4, 0, -1, -4, -1, 0, 3, 12, 3, 0, -3, -12, -3, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
3, 0, -3, 0, -9, 0, 9, 0, 9, 0, -9, 0, -3, 0, 3, 0, 12, 0, -12, 0, -36, 0, 36, 0, 36, 0, -36, 0, -12, 0, 12, 0, 3, 0, -3, 0, -9, 0, 9, 0, 9, 0, -9, 0, -3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-3, 6, -3, 0, 9, -18, 9, 0, -9, 18, -9, 0, 3, -6, 3, 0, -12, 24, -12, 0, 36, -72, 36, 0, -36, 72, -36, 0, 12, -24, 12, 0, -3, 6, -3, 0, 9, -18, 9, 0, -9, 18, -9, 0, 3, -6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, -3, 3, -1, -3, 9, -9, 3, 3, -9, 9, -3, -1, 3, -3, 1, 4, -12, 12, -4, -12, 36, -36, 12, 12, -36, 36, -12, -4, 12, -12, 4, 1, -3, 3, -1, -3, 9, -9, 3, 3, -9, 9, -3, -1, 3, -3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-3, -12, -3, 0, -12, -48, -12, 0, -3, -12, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 12, 3, 0, 12, 48, 12, 0, 3, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, 0, -9, 0, 36, 0, -36, 0, 9, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 9, 0, -36, 0, 36, 0, -9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-9, 18, -9, 0, -36, 72, -36, 0, -9, 18, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, -18, 9, 0, 36, -72, 36, 0, 9, -18, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
3, -9, 9, -3, 12, -36, 36, -12, 3, -9, 9, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 9, -9, 3, -12, 36, -36, 12, -3, 9, -9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, 36, 9, 0, 0, 0, 0, 0, -9, -36, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, -36, -9, 0, 0, 0, 0, 0, 9, 36, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-27, 0, 27, 0, 0, 0, 0, 0, 27, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, -27, 0, 0, 0, 0, 0, -27, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
27, -54, 27, 0, 0, 0, 0, 0, -27, 54, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 54, -27, 0, 0, 0, 0, 0, 27, -54, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-9, 27, -27, 9, 0, 0, 0, 0, 9, -27, 27, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, -27, 27, -9, 0, 0, 0, 0, -9, 27, -27, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-9, -36, -9, 0, 18, 72, 18, 0, -9, -36, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 36, 9, 0, -18, -72, -18, 0, 9, 36, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
27, 0, -27, 0, -54, 0, 54, 0, 27, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 27, 0, 54, 0, -54, 0, -27, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-27, 54, -27, 0, 54, -108, 54, 0, -27, 54, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, -54, 27, 0, -54, 108, -54, 0, 27, -54, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, -27, 27, -9, -18, 54, -54, 18, 9, -27, 27, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 27, -27, 9, 18, -54, 54, -18, -9, 27, -27, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
3, 12, 3, 0, -9, -36, -9, 0, 9, 36, 9, 0, -3, -12, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -12, -3, 0, 9, 36, 9, 0, -9, -36, -9, 0, 3, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-9, 0, 9, 0, 27, 0, -27, 0, -27, 0, 27, 0, 9, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, -9, 0, -27, 0, 27, 0, 27, 0, -27, 0, -9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, -18, 9, 0, -27, 54, -27, 0, 27, -54, 27, 0, -9, 18, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 18, -9, 0, 27, -54, 27, 0, -27, 54, -27, 0, 9, -18, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-3, 9, -9, 3, 9, -27, 27, -9, -9, 27, -27, 9, 3, -9, 9, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, -9, 9, -3, -9, 27, -27, 9, 9, -27, 27, -9, -3, 9, -9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
3, 12, 3, 0, 12, 48, 12, 0, 3, 12, 3, 0, 0, 0, 0, 0, -6, -24, -6, 0, -24, -96, -24, 0, -6, -24, -6, 0, 0, 0, 0, 0, 3, 12, 3, 0, 12, 48, 12, 0, 3, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-9, 0, 9, 0, -36, 0, 36, 0, -9, 0, 9, 0, 0, 0, 0, 0, 18, 0, -18, 0, 72, 0, -72, 0, 18, 0, -18, 0, 0, 0, 0, 0, -9, 0, 9, 0, -36, 0, 36, 0, -9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, -18, 9, 0, 36, -72, 36, 0, 9, -18, 9, 0, 0, 0, 0, 0, -18, 36, -18, 0, -72, 144, -72, 0, -18, 36, -18, 0, 0, 0, 0, 0, 9, -18, 9, 0, 36, -72, 36, 0, 9, -18, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-3, 9, -9, 3, -12, 36, -36, 12, -3, 9, -9, 3, 0, 0, 0, 0, 6, -18, 18, -6, 24, -72, 72, -24, 6, -18, 18, -6, 0, 0, 0, 0, -3, 9, -9, 3, -12, 36, -36, 12, -3, 9, -9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-9, -36, -9, 0, 0, 0, 0, 0, 9, 36, 9, 0, 0, 0, 0, 0, 18, 72, 18, 0, 0, 0, 0, 0, -18, -72, -18, 0, 0, 0, 0, 0, -9, -36, -9, 0, 0, 0, 0, 0, 9, 36, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
27, 0, -27, 0, 0, 0, 0, 0, -27, 0, 27, 0, 0, 0, 0, 0, -54, 0, 54, 0, 0, 0, 0, 0, 54, 0, -54, 0, 0, 0, 0, 0, 27, 0, -27, 0, 0, 0, 0, 0, -27, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-27, 54, -27, 0, 0, 0, 0, 0, 27, -54, 27, 0, 0, 0, 0, 0, 54, -108, 54, 0, 0, 0, 0, 0, -54, 108, -54, 0, 0, 0, 0, 0, -27, 54, -27, 0, 0, 0, 0, 0, 27, -54, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, -27, 27, -9, 0, 0, 0, 0, -9, 27, -27, 9, 0, 0, 0, 0, -18, 54, -54, 18, 0, 0, 0, 0, 18, -54, 54, -18, 0, 0, 0, 0, 9, -27, 27, -9, 0, 0, 0, 0, -9, 27, -27, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, 36, 9, 0, -18, -72, -18, 0, 9, 36, 9, 0, 0, 0, 0, 0, -18, -72, -18, 0, 36, 144, 36, 0, -18, -72, -18, 0, 0, 0, 0, 0, 9, 36, 9, 0, -18, -72, -18, 0, 9, 36, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-27, 0, 27, 0, 54, 0, -54, 0, -27, 0, 27, 0, 0, 0, 0, 0, 54, 0, -54, 0, -108, 0, 108, 0, 54, 0, -54, 0, 0, 0, 0, 0, -27, 0, 27, 0, 54, 0, -54, 0, -27, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
27, -54, 27, 0, -54, 108, -54, 0, 27, -54, 27, 0, 0, 0, 0, 0, -54, 108, -54, 0, 108, -216, 108, 0, -54, 108, -54, 0, 0, 0, 0, 0, 27, -54, 27, 0, -54, 108, -54, 0, 27, -54, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-9, 27, -27, 9, 18, -54, 54, -18, -9, 27, -27, 9, 0, 0, 0, 0, 18, -54, 54, -18, -36, 108, -108, 36, 18, -54, 54, -18, 0, 0, 0, 0, -9, 27, -27, 9, 18, -54, 54, -18, -9, 27, -27, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-3, -12, -3, 0, 9, 36, 9, 0, -9, -36, -9, 0, 3, 12, 3, 0, 6, 24, 6, 0, -18, -72, -18, 0, 18, 72, 18, 0, -6, -24, -6, 0, -3, -12, -3, 0, 9, 36, 9, 0, -9, -36, -9, 0, 3, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, 0, -9, 0, -27, 0, 27, 0, 27, 0, -27, 0, -9, 0, 9, 0, -18, 0, 18, 0, 54, 0, -54, 0, -54, 0, 54, 0, 18, 0, -18, 0, 9, 0, -9, 0, -27, 0, 27, 0, 27, 0, -27, 0, -9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-9, 18, -9, 0, 27, -54, 27, 0, -27, 54, -27, 0, 9, -18, 9, 0, 18, -36, 18, 0, -54, 108, -54, 0, 54, -108, 54, 0, -18, 36, -18, 0, -9, 18, -9, 0, 27, -54, 27, 0, -27, 54, -27, 0, 9, -18, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
3, -9, 9, -3, -9, 27, -27, 9, 9, -27, 27, -9, -3, 9, -9, 3, -6, 18, -18, 6, 18, -54, 54, -18, -18, 54, -54, 18, 6, -18, 18, -6, 3, -9, 9, -3, -9, 27, -27, 9, 9, -27, 27, -9, -3, 9, -9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
-1, -4, -1, 0, -4, -16, -4, 0, -1, -4, -1, 0, 0, 0, 0, 0, 3, 12, 3, 0, 12, 48, 12, 0, 3, 12, 3, 0, 0, 0, 0, 0, -3, -12, -3, 0, -12, -48, -12, 0, -3, -12, -3, 0, 0, 0, 0, 0, 1, 4, 1, 0, 4, 16, 4, 0, 1, 4, 1, 0, 0, 0, 0, 0, 
3, 0, -3, 0, 12, 0, -12, 0, 3, 0, -3, 0, 0, 0, 0, 0, -9, 0, 9, 0, -36, 0, 36, 0, -9, 0, 9, 0, 0, 0, 0, 0, 9, 0, -9, 0, 36, 0, -36, 0, 9, 0, -9, 0, 0, 0, 0, 0, -3, 0, 3, 0, -12, 0, 12, 0, -3, 0, 3, 0, 0, 0, 0, 0, 
-3, 6, -3, 0, -12, 24, -12, 0, -3, 6, -3, 0, 0, 0, 0, 0, 9, -18, 9, 0, 36, -72, 36, 0, 9, -18, 9, 0, 0, 0, 0, 0, -9, 18, -9, 0, -36, 72, -36, 0, -9, 18, -9, 0, 0, 0, 0, 0, 3, -6, 3, 0, 12, -24, 12, 0, 3, -6, 3, 0, 0, 0, 0, 0, 
1, -3, 3, -1, 4, -12, 12, -4, 1, -3, 3, -1, 0, 0, 0, 0, -3, 9, -9, 3, -12, 36, -36, 12, -3, 9, -9, 3, 0, 0, 0, 0, 3, -9, 9, -3, 12, -36, 36, -12, 3, -9, 9, -3, 0, 0, 0, 0, -1, 3, -3, 1, -4, 12, -12, 4, -1, 3, -3, 1, 0, 0, 0, 0, 
3, 12, 3, 0, 0, 0, 0, 0, -3, -12, -3, 0, 0, 0, 0, 0, -9, -36, -9, 0, 0, 0, 0, 0, 9, 36, 9, 0, 0, 0, 0, 0, 9, 36, 9, 0, 0, 0, 0, 0, -9, -36, -9, 0, 0, 0, 0, 0, -3, -12, -3, 0, 0, 0, 0, 0, 3, 12, 3, 0, 0, 0, 0, 0, 
-9, 0, 9, 0, 0, 0, 0, 0, 9, 0, -9, 0, 0, 0, 0, 0, 27, 0, -27, 0, 0, 0, 0, 0, -27, 0, 27, 0, 0, 0, 0, 0, -27, 0, 27, 0, 0, 0, 0, 0, 27, 0, -27, 0, 0, 0, 0, 0, 9, 0, -9, 0, 0, 0, 0, 0, -9, 0, 9, 0, 0, 0, 0, 0, 
9, -18, 9, 0, 0, 0, 0, 0, -9, 18, -9, 0, 0, 0, 0, 0, -27, 54, -27, 0, 0, 0, 0, 0, 27, -54, 27, 0, 0, 0, 0, 0, 27, -54, 27, 0, 0, 0, 0, 0, -27, 54, -27, 0, 0, 0, 0, 0, -9, 18, -9, 0, 0, 0, 0, 0, 9, -18, 9, 0, 0, 0, 0, 0, 
-3, 9, -9, 3, 0, 0, 0, 0, 3, -9, 9, -3, 0, 0, 0, 0, 9, -27, 27, -9, 0, 0, 0, 0, -9, 27, -27, 9, 0, 0, 0, 0, -9, 27, -27, 9, 0, 0, 0, 0, 9, -27, 27, -9, 0, 0, 0, 0, 3, -9, 9, -3, 0, 0, 0, 0, -3, 9, -9, 3, 0, 0, 0, 0, 
-3, -12, -3, 0, 6, 24, 6, 0, -3, -12, -3, 0, 0, 0, 0, 0, 9, 36, 9, 0, -18, -72, -18, 0, 9, 36, 9, 0, 0, 0, 0, 0, -9, -36, -9, 0, 18, 72, 18, 0, -9, -36, -9, 0, 0, 0, 0, 0, 3, 12, 3, 0, -6, -24, -6, 0, 3, 12, 3, 0, 0, 0, 0, 0, 
9, 0, -9, 0, -18, 0, 18, 0, 9, 0, -9, 0, 0, 0, 0, 0, -27, 0, 27, 0, 54, 0, -54, 0, -27, 0, 27, 0, 0, 0, 0, 0, 27, 0, -27, 0, -54, 0, 54, 0, 27, 0, -27, 0, 0, 0, 0, 0, -9, 0, 9, 0, 18, 0, -18, 0, -9, 0, 9, 0, 0, 0, 0, 0, 
-9, 18, -9, 0, 18, -36, 18, 0, -9, 18, -9, 0, 0, 0, 0, 0, 27, -54, 27, 0, -54, 108, -54, 0, 27, -54, 27, 0, 0, 0, 0, 0, -27, 54, -27, 0, 54, -108, 54, 0, -27, 54, -27, 0, 0, 0, 0, 0, 9, -18, 9, 0, -18, 36, -18, 0, 9, -18, 9, 0, 0, 0, 0, 0, 
3, -9, 9, -3, -6, 18, -18, 6, 3, -9, 9, -3, 0, 0, 0, 0, -9, 27, -27, 9, 18, -54, 54, -18, -9, 27, -27, 9, 0, 0, 0, 0, 9, -27, 27, -9, -18, 54, -54, 18, 9, -27, 27, -9, 0, 0, 0, 0, -3, 9, -9, 3, 6, -18, 18, -6, -3, 9, -9, 3, 0, 0, 0, 0, 
1, 4, 1, 0, -3, -12, -3, 0, 3, 12, 3, 0, -1, -4, -1, 0, -3, -12, -3, 0, 9, 36, 9, 0, -9, -36, -9, 0, 3, 12, 3, 0, 3, 12, 3, 0, -9, -36, -9, 0, 9, 36, 9, 0, -3, -12, -3, 0, -1, -4, -1, 0, 3, 12, 3, 0, -3, -12, -3, 0, 1, 4, 1, 0, 
-3, 0, 3, 0, 9, 0, -9, 0, -9, 0, 9, 0, 3, 0, -3, 0, 9, 0, -9, 0, -27, 0, 27, 0, 27, 0, -27, 0, -9, 0, 9, 0, -9, 0, 9, 0, 27, 0, -27, 0, -27, 0, 27, 0, 9, 0, -9, 0, 3, 0, -3, 0, -9, 0, 9, 0, 9, 0, -9, 0, -3, 0, 3, 0, 
3, -6, 3, 0, -9, 18, -9, 0, 9, -18, 9, 0, -3, 6, -3, 0, -9, 18, -9, 0, 27, -54, 27, 0, -27, 54, -27, 0, 9, -18, 9, 0, 9, -18, 9, 0, -27, 54, -27, 0, 27, -54, 27, 0, -9, 18, -9, 0, -3, 6, -3, 0, 9, -18, 9, 0, -9, 18, -9, 0, 3, -6, 3, 0, 
-1, 3, -3, 1, 3, -9, 9, -3, -3, 9, -9, 3, 1, -3, 3, -1, 3, -9, 9, -3, -9, 27, -27, 9, 9, -27, 27, -9, -3, 9, -9, 3, -3, 9, -9, 3, 9, -27, 27, -9, -9, 27, -27, 9, 3, -9, 9, -3, 1, -3, 3, -1, -3, 9, -9, 3, 3, -9, 9, -3, -1, 3, -3, 1;
        return X_inv;
    }


  protected:
    // The algorithm shown here is slightly different from the one in the
    // WBIR paper. We've removed a factor if 6 from the input, and in turn
    // multiplied the X_inv matrix by that factor (well, 6^3, since this is
    // applied on all three dimensions). This makes X_inv integers, and
    // reduces the number of multiplications here as well.
    void computeCoefficientLine(
      const T *input,
      T *output,
      const size_t length,
      const size_t stride) const { 
        const T oneMinusZ0ToNInverse = ((T) 1.0) / ( ((T) 1.0) - pow(z0, length) );
        
        // construct the g values 
        T gBuf[length];
        T gBufPrev;

        gBufPrev = gBuf[0] = input[0];

        for(size_t i = 1; i < length - 1; i++) {
          gBufPrev =
            gBuf[i] =
              z0 * gBufPrev + input[i * stride];
        }

        gBuf[length - 1] =
          (z0 * gBufPrev + input[(length - 1) * stride]) *
            oneMinusZ0ToNInverse;
   
        // construct the c+ values
        T cPlusBuf[length];
        cPlusBuf[length - 1] = gBuf[length - 1];

        T z0PowTimesLastG = z0 * gBuf[length - 1];

        for(size_t i = 0; i < length - 1; i++) {
          cPlusBuf[i] = gBuf[i] + z0PowTimesLastG;
          z0PowTimesLastG *= z0; 
        }

        // construct the h values
        T hBuf[length];
        hBuf[length - 1] = -z0 * cPlusBuf[length - 1];

        for(size_t i = length - 2; i > 0; i--) {
          hBuf[i] = z0 * (hBuf[i+1] - cPlusBuf[i]); 
        }

        hBuf[0] = z0 * (hBuf[1] - cPlusBuf[0]) * oneMinusZ0ToNInverse;

        // construct output
        output[0] = hBuf[0];

        T z0PowTimesFirstH = z0 * hBuf[0];

        for(size_t i = length - 1; i > 0; i--) {
          // note: this line was wrong in the WBIR abstract!
          output[i * stride] = hBuf[i] + z0PowTimesFirstH;
          z0PowTimesFirstH *= z0;
        }
    }

    void computeCubicBSplineCoefficientVolume(
      const VolumeT *volume,
      VolumeT *coeffVolume) const {

      // convert the coefficients in the x direction
      VolumeT xConv(this->cubeSize);

      for(size_t z = 0; z < this->cubeSize; z++) {
        for(size_t y = 0; y < this->cubeSize; y++) { 
          size_t offset = (z * this->cubeSize + y) * this->cubeSize;
          computeCoefficientLine(
            volume->buffer + offset,
            xConv.buffer + offset,
            this->cubeSize, 1); 
        }
      }
    
//      std::cout << "xConv(0): " << xConv.at(0) << std::endl;
//      std::cout << "xConv(999): " << xConv.at(999) << std::endl;

      // convert the coefficients in the y direction
      VolumeT yConv(this->cubeSize);

      for(size_t z = 0; z < this->cubeSize; z++) {
        for(size_t x = 0; x < this->cubeSize; x++) { 
          size_t offset = (z * this->cubeSize * this->cubeSize) + x;
          computeCoefficientLine(
            xConv.buffer + offset,
            yConv.buffer + offset,
            this->cubeSize, this->cubeSize); 
        }
      }
      
//      std::cout << "yConv(0): " << yConv.at(0) << std::endl;
//      std::cout << "yConv(999): " << yConv.at(999) << std::endl;
      
      // convert the coefficients in the z direction
      for(size_t y = 0; y < this->cubeSize; y++) {
        for(size_t x = 0; x < this->cubeSize; x++) { 
          size_t offset = y * this->cubeSize + x;
          computeCoefficientLine(
            yConv.buffer + offset,
            coeffVolume->buffer + offset,
            this->cubeSize, this->cubeSize * this->cubeSize); 
        }
      }
      
//      std::cout << "coeffVolume(0): " << coeffVolume->at(0) << std::endl;
//      std::cout << "coeffVolume(999): " << coeffVolume->at(999) << std::endl;
    }

    static void constructCoeffVectorSubpart(
      T *temp,
      const VolumeT *volume,
      const int z,
      const int y,
      const int x) {
        size_t offset = 0;

        for(int curZ = z - 1; curZ <= z + 2; curZ++) {
          int zIndex = volume->wrapIndex(curZ);
          for(int curY = y - 1; curY <= y + 2; curY++) {
            int yIndex = volume->wrapIndex(curY);
            for(int curX = x - 1; curX <= x + 2; curX++, offset++) {
              int xIndex = volume->wrapIndex(curX);
             

              temp[offset] = volume->at(zIndex, yIndex, xIndex);
              
              if(0 == z && 0 == y && 0 == x) {
//                std::cout << "temp[" << offset << "]: " << temp[offset] << std::endl;
//                std::cout << "volume[" << zIndex << ", " << yIndex << ", " << xIndex << "]: " << volume->at(zIndex, yIndex, xIndex) << std::endl;
              }
            }
          }
        }
    }

    void computeCoefficients(const VolumeT *volume) {
          T temp[64];

          Eigen::Map< Eigen::Matrix<T, 64, 1> > tempVector(temp);

          const size_t totalPoints =
            volume->cubeSize * volume->cubeSize * volume->cubeSize;
   
          VolumeT coeffVolume(volume->cubeSize);

//          std::cout << "coeffVolume.totalPoints: " << coeffVolume.totalPoints << std::endl;
          
          computeCubicBSplineCoefficientVolume(volume, &coeffVolume);

//          std::cout << "coeffVolume(0): " << coeffVolume.at(0) << std::endl;

          Eigen::Matrix<T, 64, Eigen::Dynamic> tempMat(64, totalPoints);

          size_t tempMatrixOffset = 0;

          for(int z = 0; z < volume->cubeSize; z++){
            for(int y = 0; y < volume->cubeSize; y++){
              for(int x = 0; x < volume->cubeSize; x++, tempMatrixOffset++){
                //values of f(x,y,z) at each corner.
                if( z == 0 && y == 0 && x == 0) { 
//                  std::cout << "before: " << tempVector.transpose() << std::endl;
                }

                constructCoeffVectorSubpart(temp, &coeffVolume, z, y, x);
                
                if( z == 0 && y == 0 && x == 0) { 
//                  std::cout << "after: " << tempVector.transpose() << std::endl;
                }

                // store the new coefficients in the temp matrix
                tempMat.col(tempMatrixOffset) = tempVector;
              }
            }
          }

//          std::cout << tempMat.col(0).transpose() << std::endl;

          // having made the argument vectors for all the points,
          // now apply the X_inv matrix to all of them to get the
          // coefficient vectors used for interpolation
          this->coefficients.noalias() = X_inv * tempMat;
    }
 

  public:
    CubicBSplineInterpolator(
      const VolumeT *volume) :
        Cubic3DInterpolator<VolumeT, CoordT>(volume),
        X_inv(generate_X_inv()),
        z0(sqrt((T) 3.0) - (T) 2.0)
        {
          computeCoefficients(volume);
        }

  protected:
    const Matrix_64_64_T X_inv;
    const T z0;
};

#endif
